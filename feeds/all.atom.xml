<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Thoughts of a software developer journeyman</title><link href="http://castellanprime.github.io/" rel="alternate"></link><link href="http://castellanprime.github.io/feeds/all.atom.xml" rel="self"></link><id>http://castellanprime.github.io/</id><updated>2016-09-09T16:27:00-05:00</updated><entry><title>Graphics: Hexagon Grid</title><link href="http://castellanprime.github.io/graphics-hexagon-grid.html" rel="alternate"></link><published>2016-09-09T16:27:00-05:00</published><author><name>Okusanya Oluwadamilola</name></author><id>tag:castellanprime.github.io,2016-09-09:graphics-hexagon-grid.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;I have been learning about graphics. A language of choice would probably be OpenGL/WebGL but this
post would be in Java. Specifically, I would be using the &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/awt/package-summary.html"&gt;java.awt&lt;/a&gt; package. Most board games (chess, checkers ) use some sort of
grid based on some shape( squares, rectangles, hexagons are the most popular) for a playing surface. &lt;/p&gt;
&lt;p&gt;Today, I will be doing a hexagon grid. Hexagons can be either in a flat or pointy configuration. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Pointy vs Flat Orientation" src="http://castellanprime.github.io/images/Point_flat_orientation.gif"/&gt;&lt;/p&gt;
&lt;p&gt;Rembering geometry &lt;code&gt;(SOHCAHTOH)&lt;/code&gt;, the number of angles in a polygon &lt;code&gt;(n -2) * 180&lt;/code&gt;  and some properties of equilateral 
triangles, we come up with this annotation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="A annotated Pentagon" src="http://castellanprime.github.io/images/Pentagon_annotated.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;There are five vertices(I start from 0, because I am too used to &lt;code&gt;array notation&lt;/code&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert0 = ( x - \frac{r}{2}, y - \frac{h}{2})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert1 = ( x + \frac{r}{2}, y - \frac{h}{2})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert2 = ( x + r, y)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert3 = ( x + \frac{r}{2}, y + \frac{h}{2})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert4 = ( x - \frac{r}{2}, y + \frac{h}{2})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert5 = ( x - r, y)\)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We also need to get measurements for drawing rows and columns:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Row measurements" src="http://castellanprime.github.io/images/Row_annotated.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;Other vertices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert6 = ( x + 2r, y)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert7 = ( x + \frac{5r}{2}, y - \frac{h}{2})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert8 = ( x + \frac{7r}{2}, y - \frac{h}{2})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert9 = ( x + 4r, y)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(vert10 = ( x - r, y + h)\)&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Column measurements" src="http://castellanprime.github.io/images/Column_annotated.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;The java code is shown below:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/d65954e146db5738b7eb08953360f2e4.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;/**
* @license: 
* The MIT License (MIT)
*
* Copyright (c) 2016 David Okusanya
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
*
* 
* @brief: Drawing a sequence of hexagons 
*
*/

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

class HexagonGrid extends Frame{

	private int margin;

	HexagonGrid(int margin){
		super("HexagonGrid - Flat Orientation");
		this.margin = margin;
		addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e){
				System.exit(0);
			}
		});
		
		setSize(400, 400);
		HexagonRect hexa = new HexagonRect(margin);
		add("Center", hexa);
		show();	
	}

	class HexagonRect extends Canvas{
		
		private int margin, mousePointX, mousePointY, height;

		private int vertex0X, vertex0Y, temp_vertex0Y,  
					vertex1X, vertex1Y, temp_vertex1Y, 
					vertex2X, vertex2Y, temp_vertex2Y,
					vertex3X, vertex3Y, temp_vertex3Y, 
					vertex4X, vertex4Y, temp_vertex4Y, 
					vertex5X, vertex5Y, temp_vertex5Y;


		/**
		 *  This is the rectangle that would contain the grid
		 */
		HexagonRect(int margin){
			this.margin = margin;

			addMouseListener(new MouseAdapter(){
				public void mouseClicked(MouseEvent mt){
					mousePointX = mt.getX();
					mousePointY = mt.getY();
					repaint();		// To facilitate a redrawing of the points
				}
			});
		}

		/**
		 *  Return the radius of the hexagon from the point of the mouse click
		 * @return radius An integer value
		 */
		public int getRadius(){
			if (mousePointX &lt;= margin){
				mousePointX += margin;
			}
			if (mousePointY &lt;= margin){
				mousePointY += margin; 
			}
			int radiusX = mousePointX - margin;
			int radiusY = mousePointY - margin;
			int radius = (int) Math.sqrt((double)(radiusX * radiusX + radiusY * radiusY));
			return radius;
		}

		/**
		 * Calculate all the vertices of the first pentagon in the grid
		 * @param radius An integer value
		 * @param height An integer value
		 */
		public void computeVertices(int radius, int height){

			// Going clockwise
			// Left Topmost vertex 
			vertex0X = (mousePointX - radius / 2);
			vertex0Y = (mousePointY - height / 2);

			// Right Topmost vertex
			vertex1X = (mousePointX + radius / 2);
			vertex1Y = (mousePointY - height / 2);

			// Rightmost vertex 
			vertex2X = (mousePointX + radius);
			vertex2Y = mousePointY;

			// Right Bottom vertex
			vertex3X = (mousePointX + radius / 2);
			vertex3Y = (mousePointY + height / 2);

			// Left Bottom vertex 
			vertex4X = (mousePointX - radius / 2);
			vertex4Y = (mousePointY + height / 2);

			// Leftmost vertex
			vertex5X = (mousePointX - radius);
			vertex5Y = mousePointY;
		}


		/**
		 * This resets the y-coordinates of the hexagon column
		 */
		public void resetTempVertices(){

			temp_vertex5Y = vertex5Y;
			temp_vertex0Y = vertex0Y;
			temp_vertex4Y = vertex4Y;
			temp_vertex1Y = vertex1Y;
			temp_vertex3Y = vertex3Y;
			temp_vertex2Y = vertex2Y;
		}


		/**
		 * This increments all the x-coordinates, to enable another columns to drawn alongside the already
		 * drawn column
		 * @param radius An integer value
		 */
		public void incrementX(int radius){

			vertex5X += 3 * radius;
			vertex0X += 3 * radius;
			vertex4X += 3 * radius;
			vertex1X += 3 * radius;
			vertex3X += 3 * radius;
			vertex2X += 3 * radius;

		}

		/**
		 * Drawing method
		 * @param g Graphics object
		 */
		public void paint(Graphics g){
			int radius = getRadius();
			System.out.println("Radius = " + radius);
			
			if (radius &gt; 0){
				height = Math.round(((float)(Math.sqrt(3) *radius)));
				System.out.println("Height = " + height);

				int nVert = numOfVerticalHexagons(radius);
				int nHort = numOfHorizontalHexagons(radius);

				computeVertices(radius, height);

				for (int j = 0; j &lt; nHort; j++){
					resetTempVertices();

					for (int i = 0; i &lt; nVert; i++){
			
						// Draw northwest line
						g.drawLine(vertex0X, temp_vertex0Y, vertex5X, temp_vertex5Y);

						// Draw southwest line
						g.drawLine(vertex5X, temp_vertex5Y, vertex4X, temp_vertex4Y);

						// Draw top line
						g.drawLine(vertex0X, temp_vertex0Y, vertex1X, temp_vertex1Y);
						
						// Draw northeast line
						g.drawLine(vertex1X, temp_vertex1Y, vertex2X, temp_vertex2Y);

						if (j != nHort - 1){ // remove the last drawn line
							// Draw top of the next column
							g.drawLine(vertex2X, temp_vertex2Y, vertex2X + radius, temp_vertex2Y);
						}

						// Draw southeast line
						g.drawLine(vertex2X, temp_vertex2Y, vertex3X, temp_vertex3Y);

						temp_vertex5Y += height;
						temp_vertex0Y += height;
						temp_vertex4Y += height;
						temp_vertex1Y += height;
						temp_vertex3Y += height;
						temp_vertex2Y += height;
					}
					// Draw the last line(botton line) joining the bottom hexagons
					g.drawLine(vertex0X, temp_vertex0Y, vertex1X, temp_vertex1Y);

					incrementX(radius);

				}
			}
		}


		/**
		 *  Returns the number of hexagons that can be fit in one column along the rectangle's height
		 * @param  radius An integer value
		 * @return count  An integer value
		 */
		public int numOfVerticalHexagons(int radius){
			Dimension d = getSize();
			int maxHeight = d.height - 1;
			return maxHeight / (2 * radius);
		}

		/**
		 * Returns the number of hexagons that can be fit in one row along the rectangle's width
		 * @param  radius An integer value
		 * @return count  An integer value
		 */
		public int numOfHorizontalHexagons(int radius){

			// Two columns of hexagons make one unit
			// Width of one hexagon = 2 x radius
			// There is an overlap of (1/2) * radius between the two columns
			Dimension d = getSize();
			int maxWidth = d.width - 1;
			if (maxWidth % 7 == 0){
				return maxWidth / ((7 / 2) * radius);
			}
			else {
				return (maxWidth -  1) / ((7 / 2) * radius);
			}
		}
	}

	public static void main(String[] args){
		// Usage : java HexagonGrid
		new HexagonGrid(40);	// Static value(change if desired)
	}
}&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Result on execution:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hexagon program execution" src="http://castellanprime.github.io/images/hexagon_output.gif"/&gt;&lt;/p&gt;
&lt;p&gt;Something I might do in the future: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rewrite in javafx&lt;/li&gt;
&lt;li&gt;Make it coloured&lt;/li&gt;
&lt;li&gt;Add a pointy example.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; Thanks!! &lt;/strong&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Code"></category></entry><entry><title>Making sense of the advice for programming newbies</title><link href="http://castellanprime.github.io/first-post.html" rel="alternate"></link><published>2016-07-22T18:47:00-05:00</published><author><name>Okusanya Oluwadamilola</name></author><id>tag:castellanprime.github.io,2016-07-22:first-post.html</id><summary type="html">&lt;/head&gt;&lt;body&gt;&lt;p&gt;There is some much choice to become a better programmer/developer. But all that advice can be distilled into
these points:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Learn types of programming(imperative, declarative, dataflow, functional, procedural). &lt;/li&gt;
&lt;li&gt;Practice on coding websites.&lt;/li&gt;
&lt;li&gt;Pick up algorithmic books and coding (best-practices) books.&lt;/li&gt;
&lt;li&gt;Search technical articles.&lt;/li&gt;
&lt;li&gt;Get experience with side projects/internships/ community development in the form of 
    open source software.
From various sources(reddit, stackoverflow and so on)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Sometimes too much choice is no choice at all, a paradox&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;That said, how does one make use of the advice listed above:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Have passion. Going very far on this road to this less-than-great programmer place  is going to be a long one, meaning there are a lot of known unknowns and unknown unknowns on the journey. So if you do not have passion, you are going to hate every step of the way.&lt;/li&gt;
&lt;li&gt;Make a schedule and stick to it.  I mean, stick to it. Think in long-term and short-term. Sometimes applying for jobs might get in the way, but make out time for them in your schedule.&lt;/li&gt;
&lt;li&gt;Follow the advice listed above in the beginning part of the document in any order you like.&lt;/li&gt;
&lt;li&gt;Code daily, in terms of hours or in terms of a goal(like shipping a function/tidying up documentation).Coding is like a muscle. It needs to worked on at regular intervals.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;That said, do I follow my own advice? I try to and fail, sometimes so miserably. After all, I am only human.&lt;/p&gt;
&lt;p&gt;One of the ways I am trying to do follow it is by putting out this blog.The blog,     &lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;imposes artifical deadlines on myself as I have to dedicate myself to push out content(show what I have learned) on a regular basis  &lt;/li&gt;
&lt;li&gt;exposes my insecurities about my programming. Some of my code would be , for a lack of a better word , shitte.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Question of the day &lt;/strong&gt; : So what realizations have you come to today?   &lt;/p&gt;</summary><category term="Rants"></category></entry></feed>